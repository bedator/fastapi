name: Build and Deploy Code

on: [push, pull_request]

jobs:
    build:
        environment:
            name: fast-api-testing
        env:
            DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
            DATABASE_PORT: ${{secrets.DATABASE_PORT}}
            DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
            DATABASE_NAME: ${{secrets.DATABASE_NAME}}
            DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
            SECRET_KEY: ${{secrets.SECRET_KEY}}
            ALGORITHM: ${{secrets.ALGORITHM}}
            ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
        services:
            postgres:
                image: postgres
                env:
                    POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
                    POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
                ports:
                    - 5432:5432
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
        runs-on: ubuntu-latest
        steps:
            - name: pulling git repo
              uses: actions/checkout@v2
            - name: Install python version 3.10
              uses: actions/setup-python@v2
              with:
                python-version: "3.10"
            - name: update pip
              run: python -m pip install --upgrade pip
            - name: install all dependencies
              run: pip install -r requirements.txt
            - name: test with pytest
              run: |
                pip install pytest
                pytest
            # - name: Log in to Docker Hub
            #   uses: docker/login-action@v3
            #   with:
            #     username: ${{ secrets.DOCKER_HUB_USERNAME }}
            #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

            # - name: Set up Docker Buildx
            #   uses: docker/setup-buildx-action@v3

            # - name: Build and push production image
            #   uses: docker/build-push-action@v6
            #   with:
            #     context: .
            #     file: Dockerfile
            #     push: true
            #     platforms: linux/amd64,linux/arm64
            #     tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapi:latest
            #     cache-from: type=local,src=/tmp/.buildx-cache

    deploy:
        runs-on: ubuntu-latest
        needs: [build]
        environment:
            name: fast-api-production
        steps:
            # STEPS FOR DEPLOYING TO HEROKU:
            # pull our github repo
            # install heroku cli
            # heroku login
            # add git remote for heroku
            # git push herou main
            # (luckily there is a github action for this which is what we'll use)
            - name: deploying Heroku
              run: echo "going to deploy some stuff"
            - uses: actions/checkout@v2
            - name: Install Heroku CLI # <- IMPORTANT!!! Make sure the cli is installed before using the action
              run: |
                curl https://cli-assets.heroku.com/install.sh | sh 
            - uses: akhileshns/heroku-deploy@v3.14.15 # This is the action
              with:
                heroku_api_key: ${{secrets.HEROKU_API_KEY}}
                heroku_app_name: ${{secrets.HEROKU_APP_NAME}} #Must be unique in Heroku
                heroku_email: ${{secrets.HEROKU_EMAIL}}

            # STEPS FOR DEPLOYING TO UBUNTU (DIGITAL OCEAN):
            # login to our ubuntu (SSH into it)
            # cd /app/src
            # git pull
            # systemctl restart api
            - name: deploy to ubuntu server
              uses: appleboy/ssh-action@v1
              with:
                host: ${{secrets.PROD_HOST}}
                username: ${{secrets.PROD_USERNAME}}
                password: ${{secrets.PROD_PASSWORD}}
                script: |
                    cd app/src
                    git pull
                    echo ${{secrets.PROD_PASSWORD}} | sudo -S systemctl restart api